package com.heanbian.block.zabbix;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public final class ZabbixInterfaceTypeUtils {

	private static final Map<String, String> _ifTypeMap;

	static {
		Map<String, String> ifTypeMap = new HashMap<>();
		ifTypeMap.put("0", "virtual");
		ifTypeMap.put("1", "other");
		ifTypeMap.put("2", "regular1822");
		ifTypeMap.put("3", "hdh1822");
		ifTypeMap.put("4", "ddnx25");
		ifTypeMap.put("5", "rfc877x25");
		ifTypeMap.put("6", "ethernetcsmacd");
		ifTypeMap.put("7", "iso88023csmacd");
		ifTypeMap.put("8", "iso88024tokenbus");
		ifTypeMap.put("9", "iso88025tokenring");
		ifTypeMap.put("10", "iso88026man");
		ifTypeMap.put("11", "starlan");
		ifTypeMap.put("12", "proteon10mbit");
		ifTypeMap.put("13", "proteon80mbit");
		ifTypeMap.put("14", "hyperchannel");
		ifTypeMap.put("15", "fddi");
		ifTypeMap.put("16", "lapb");
		ifTypeMap.put("17", "sdlc");
		ifTypeMap.put("18", "ds1");
		ifTypeMap.put("19", "e1");
		ifTypeMap.put("20", "basicisdn");
		ifTypeMap.put("21", "primaryisdn");
		ifTypeMap.put("22", "proppointtopointserial");
		ifTypeMap.put("23", "ppp");
		ifTypeMap.put("24", "softwareloopback");
		ifTypeMap.put("25", "eon");
		ifTypeMap.put("26", "ethernet3mbit");
		ifTypeMap.put("27", "nsip");
		ifTypeMap.put("28", "slip");
		ifTypeMap.put("29", "ultra");
		ifTypeMap.put("30", "ds3");
		ifTypeMap.put("31", "sip");
		ifTypeMap.put("32", "framerelay");
		ifTypeMap.put("33", "rs232");
		ifTypeMap.put("34", "para");
		ifTypeMap.put("35", "arcnet");
		ifTypeMap.put("36", "arcnetplus");
		ifTypeMap.put("37", "atm");
		ifTypeMap.put("38", "miox25");
		ifTypeMap.put("39", "sonet");
		ifTypeMap.put("40", "x25ple");
		ifTypeMap.put("41", "iso88022llc");
		ifTypeMap.put("42", "localtalk");
		ifTypeMap.put("43", "smdsdxi");
		ifTypeMap.put("44", "framerelayservice");
		ifTypeMap.put("45", "v35");
		ifTypeMap.put("46", "hssi");
		ifTypeMap.put("47", "hippi");
		ifTypeMap.put("48", "modem");
		ifTypeMap.put("49", "aal5");
		ifTypeMap.put("50", "sonetpath");
		ifTypeMap.put("51", "sonetvt");
		ifTypeMap.put("52", "smdsicip");
		ifTypeMap.put("53", "propvirtual");
		ifTypeMap.put("54", "propmultiplexor");
		ifTypeMap.put("55", "ieee80212");
		ifTypeMap.put("56", "fibrechannel");
		ifTypeMap.put("57", "hippiinterface");
		ifTypeMap.put("58", "framerelayinterconnect");
		ifTypeMap.put("59", "aflane8023");
		ifTypeMap.put("60", "aflane8025");
		ifTypeMap.put("61", "cctemul");
		ifTypeMap.put("62", "fastether");
		ifTypeMap.put("63", "isdn");
		ifTypeMap.put("64", "v11");
		ifTypeMap.put("65", "v36");
		ifTypeMap.put("66", "g703at64k");
		ifTypeMap.put("67", "g703at2mb");
		ifTypeMap.put("68", "qllc");
		ifTypeMap.put("69", "fastetherfx");
		ifTypeMap.put("70", "channel");
		ifTypeMap.put("71", "ieee80211");
		ifTypeMap.put("72", "ibm370parchan");
		ifTypeMap.put("73", "escon");
		ifTypeMap.put("74", "dlsw");
		ifTypeMap.put("75", "isdns");
		ifTypeMap.put("76", "isdnu");
		ifTypeMap.put("77", "lapd");
		ifTypeMap.put("78", "ipswitch");
		ifTypeMap.put("79", "rsrb");
		ifTypeMap.put("80", "atmlogical");
		ifTypeMap.put("81", "ds0");
		ifTypeMap.put("82", "ds0bundle");
		ifTypeMap.put("83", "bsc");
		ifTypeMap.put("84", "async");
		ifTypeMap.put("85", "cnr");
		ifTypeMap.put("86", "iso88025dtr");
		ifTypeMap.put("87", "eplrs");
		ifTypeMap.put("88", "arap");
		ifTypeMap.put("89", "propcnls");
		ifTypeMap.put("90", "hostpad");
		ifTypeMap.put("91", "termpad");
		ifTypeMap.put("92", "framerelaympi");
		ifTypeMap.put("93", "x213");
		ifTypeMap.put("94", "adsl");
		ifTypeMap.put("95", "radsl");
		ifTypeMap.put("96", "sdsl");
		ifTypeMap.put("97", "vdsl");
		ifTypeMap.put("98", "iso88025crfpint");
		ifTypeMap.put("99", "myrinet");
		ifTypeMap.put("100", "voiceem");
		ifTypeMap.put("101", "voicefxo");
		ifTypeMap.put("102", "voicefxs");
		ifTypeMap.put("103", "voiceencap");
		ifTypeMap.put("104", "voiceoverip");
		ifTypeMap.put("105", "atmdxi");
		ifTypeMap.put("106", "atmfuni");
		ifTypeMap.put("107", "atmima");
		ifTypeMap.put("108", "pppmultilinkbundle");
		ifTypeMap.put("109", "ipovercdlc");
		ifTypeMap.put("110", "ipoverclaw");
		ifTypeMap.put("111", "stacktostack");
		ifTypeMap.put("112", "virtualipaddress");
		ifTypeMap.put("113", "mpc");
		ifTypeMap.put("114", "ipoveratm");
		ifTypeMap.put("115", "iso88025fiber");
		ifTypeMap.put("116", "tdlc");
		ifTypeMap.put("117", "gigabitethernet");
		ifTypeMap.put("118", "hdlc");
		ifTypeMap.put("119", "lapf");
		ifTypeMap.put("120", "v37");
		ifTypeMap.put("121", "x25mlp");
		ifTypeMap.put("122", "x25huntgroup");
		ifTypeMap.put("123", "trasnphdlc");
		ifTypeMap.put("124", "interleave");
		ifTypeMap.put("125", "fast");
		ifTypeMap.put("126", "ip");
		ifTypeMap.put("127", "docscablemaclayer");
		ifTypeMap.put("128", "docscabledownstream");
		ifTypeMap.put("129", "docscableupstream");
		ifTypeMap.put("130", "a12mppswitch");
		ifTypeMap.put("131", "tunnel");
		ifTypeMap.put("132", "coffee");
		ifTypeMap.put("133", "ces");
		ifTypeMap.put("134", "atmsubinterface");
		ifTypeMap.put("135", "l2vlan");
		ifTypeMap.put("136", "l3ipvlan");
		ifTypeMap.put("137", "l3ipxvlan");
		ifTypeMap.put("138", "digitalpowerline");
		ifTypeMap.put("139", "mediamailoverip");
		ifTypeMap.put("140", "dtm");
		ifTypeMap.put("141", "dcn");
		ifTypeMap.put("142", "ipforward");
		ifTypeMap.put("143", "msdsl");
		ifTypeMap.put("144", "ieee1394");
		ifTypeMap.put("145", "if_gsn");
		ifTypeMap.put("146", "dvbrccmaclayer");
		ifTypeMap.put("147", "dvbrccdownstream");
		ifTypeMap.put("148", "dvbrccupstream");
		ifTypeMap.put("149", "atmvirtual");
		ifTypeMap.put("150", "mplstunnel");
		ifTypeMap.put("151", "srp");
		ifTypeMap.put("152", "voiceoveratm");
		ifTypeMap.put("153", "voiceoverframerelay");
		ifTypeMap.put("154", "idsl");
		ifTypeMap.put("155", "compositelink");
		ifTypeMap.put("156", "ss7siglink");
		ifTypeMap.put("157", "propwirelessp2p");
		ifTypeMap.put("158", "frforward");
		ifTypeMap.put("159", "rfc1483");
		ifTypeMap.put("160", "usb");
		ifTypeMap.put("161", "ieee8023adlag");
		ifTypeMap.put("65534", "switchstack");
		_ifTypeMap = Collections.unmodifiableMap(ifTypeMap);
	}

	public static String getInterfaceType(String type) {
		return _ifTypeMap.get(type) != null ? _ifTypeMap.get(type) : type;
	}

}
